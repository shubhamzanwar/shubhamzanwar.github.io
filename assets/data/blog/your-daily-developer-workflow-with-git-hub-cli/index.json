{"hash":"5c632c4b6400d9548592a19765e04cd528d99d6e","data":{"post":{"id":"6db61e47361f2335a9431752edd654c0","title":"Your daily developer workflow with GitHub CLI 👨🏻‍💻","content":"<p>If you're a software developer, there is a pretty high chance that you have used GitHub to host your code repositories. I'm sure you'll agree that it's an amazing place to host and showcase your projects💜. I'm also sure that you'll agree that vising the website to review pull requests, create an issue or release a, well, release is sometimes very frustrating - simply because it calls for so much context switching between your editor/terminal to your browser😖.</p>\n<p>That's just not how things should work! 😤</p>\n<p>Well, (thankfully) it seems like the unicorns at GitHub recognized this problem and have released the official GitHub CLI v1.0.0</p>\n<p>In this blog post, I'll walk through my daily tasks as a developer and how I'm completely shifting my GitHub workflow to the cli🤩.</p>\n<h3 id=\"what-do-i-use-github-for\"><a href=\"#what-do-i-use-github-for\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What do I use GitHub for?</h3>\n<p>Let's go over the tasks you and I would use GitHub for, while working on a project:</p>\n<ol>\n<li>Create issues</li>\n<li>Assign issues</li>\n<li>Create a PR that closes an issue</li>\n<li>Review/merge a PR someone else has assigned to you</li>\n<li>Create a release for your package</li>\n</ol>\n<p>Let's now bring all these tasks to our terminal so we don't have to log onto GitHub through the browser every time.</p>\n<h3 id=\"lets-move-to-the-cli-\"><a href=\"#lets-move-to-the-cli-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Let's move to the CLI 🚀</h3>\n<p>First things first, let's download the cli on our local machine. I'm using a macbook pro so I'll follow the instructions for it, but you can find the instructions for your OS <a href=\"https://github.com/cli/cli#installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Install with Homebrew</span>\nbrew <span class=\"token function\">install</span> gh</code></pre>\n<p>Once the download is complete, it's time to log into your account from the cli🔑. There are two ways of doing this. Either using a browser login, or by using a personal access token. I'll be showing the browser login, but the process it fairly simple for the personal access token too.</p>\n<p>Run the following in your terminal:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh auth login</code></pre>\n<p>This will fire up an interactive program in your terminal that will ask you for your username and authenticate you using your browser</p>\n<p>Follow the steps shown in the below recording</p>\n<p><img src=\"/img/gh-cli-login.gif\" alt=\"gh-cli-login\"></p>\n<p>You're all set to start using the gh-cli now 😁</p>\n<p>Let's create our first repo on GitHub in which we'll perform all the other tasks. To do this, navigate to any git repo on your machine, in my case it is the <code>gh-cli-demo</code> repo, and run the below command</p>\n<blockquote>\n<p>Make sure you add atleast one commit on your master branch and push that to github</p>\n</blockquote>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh repo create</code></pre>\n<p>You will be greeted by a set of questions like below. Choose the appropriate responses and you'll be set. (<em>You can verify the repo creation by navigating to the link mentioned at the end of the interaction</em>)</p>\n<p><img src=\"/img/gh-cli-repo-create.png\" alt=\"gh-cli-repo-create\"></p>\n<p>We are ready to start working on our project now. Let's create an issue that we'll use to track our progress📝 (<em>In this case, our \"dummy\" issue will be addressed to adding a readme.md file for documentation</em>)</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh issue create --title <span class=\"token string\">\"Add documentation!!\"</span> --body <span class=\"token string\">\"create a read me file describing what this repo is about\"</span> --assignee shubhamzanwar</code></pre>\n<p>In this case, we've used the <code>title</code>, <code>body</code> and the <code>assignee</code> flags. For the whole set, you can check out <a href=\"https://cli.github.com/manual/gh_issue_create\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this page</a> from the cli documentation</p>\n<p><img src=\"/img/gh-cli-issue-create.png\" alt=\"gh-cli-issue-create\"></p>\n<p>Well, we've created the issue and it is assigned to us. Let's get cracking with it and create a readme file. We'll then raise a PR to merge our documentation into the master branch🚀. This part is probably already familiar to you. we use the good old <code>git</code> for this.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout -b documentation\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Demo repo to learn github cli\"</span> <span class=\"token operator\">></span> readme.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> readme.md\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"adding documentation\"</span>\n<span class=\"token function\">git</span> push origin documentation</code></pre>\n<p>At this point, our documentation changes are in the <code>documentation</code> branch. We ned to merge this with master. So let's create a PR that also references issue #1. Run the below command to create this PR from your terminal.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh <span class=\"token function\">pr</span> create</code></pre>\n<p>This will prompt you for the PR title and the body and you can mention whatever is apt.</p>\n<blockquote>\n<p>If you want to use GitHub automation, you can type \"closes #1\" in the body of this PR. That way, github will automatically close the issue #1 when this PR gets merged😎</p>\n</blockquote>\n<p><img src=\"/img/gh-cli-create-pr.png\" alt=\"gh-cli-create-pr\"></p>\n<p>Since we have created a PR, let's also play the role of out teammate and review/merge this PR. To do this, we can checkout to the PR locally, go through the code and then decide if we want to merge this or not.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh <span class=\"token function\">pr</span> checkout <span class=\"token number\">2</span></code></pre>\n<p>Review the code now (well, in this case, it's your own code😂). Since everything is good, let's go ahead and merge this PR.</p>\n<blockquote>\n<p>In case you have comments/changes to request, you still have to use the browser. Hope github comes up with a cli solution for this too in later updates of <code>gh</code>🤞🏽</p>\n</blockquote>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh <span class=\"token function\">pr</span> merge <span class=\"token number\">2</span></code></pre>\n<p>This again, opens up a prompt asking whether we want to squash/merge/rebase. Feel free to choose this according to your preference.</p>\n<p><img src=\"/img/gh-cli-pr-merge.png\" alt=\"gh-cli-pr-merge\"></p>\n<p>Yay! you've successfully merged your code into the master branch both locally and on remote without leaving your terminal. Cool, right? 🤘🏽</p>\n<p>As a final step, let's create a new master release for our repo. (<em>This is usually used by libraries, but since we're trying everything out for our dummy repo, why not?</em>😉)</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">gh release create v1.0.0</code></pre>\n<p>This will ask you a few set of questions about the title, release notes, etc. You can fill this up according to your release spec. In this case, I've left the release notes blank.</p>\n<p><img src=\"/img/gh-cli-release-create.png\" alt=\"gh-cli-release-create\"></p>\n<p>There you go!🎉 You've successfully learned how to create a repo, create issues, raise and merge PRs, close issues and create releases - all from your terminal, thanks to GitHub cli.</p>\n<p>This tool (obviously) contains a lot more features and more flags/options for each feature. You can check out the documentation <a href=\"https://cli.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n<p>Hope you found this blog-post interesting. You can connect with me on <a href=\"https://twitter.com/szanwar22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">twitter</a> or <a href=\"https://github.com/shubhamzanwar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a></p>\n<p>Cheers ☕️</p>\n","date":"21 Oct 2020","timeToRead":4,"coverImage":"/img/github-cli.jpg","subTitle":"Taking the new GitHub CLI for a spin by performing daily development tasks from the terminal","coverCredit":"Photo by <a href=\"https://unsplash.com/@brina_blum?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Brina Blum</a> on <a href=\"https://unsplash.com/s/photos/github?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}
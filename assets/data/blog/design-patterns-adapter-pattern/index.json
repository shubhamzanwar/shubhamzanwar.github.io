{"hash":"db8e5d68af61c7f4971d063ed63aa722c67a25fd","data":{"post":{"id":"40c22358607819b8b34363d6b8bcb493","title":"Design Patterns: Adapter Pattern 🔌","content":"<p>The Adapter pattern is a structural design pattern. It allows 2 or more incompatible objects to interface with each other.</p>\n<p>The first thing that comes to mind it probably the adapters for wall-sockets that allow your Indian phone charger to fit into European wall sockets! 😂 That's exactly what adapters are. They are wrapper classes written around non-uniform classes so that the end result exposes a uniform API.</p>\n<p>In case this is difficult to grasp, the following example should help:</p>\n<h3 id=\"translator-example\"><a href=\"#translator-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Translator example</h3>\n<p>Consider that you're a regular english speaking person who has just migrated to Spain. 🇪🇸\nYour neighbour is a pleasant looking person and you'd like to be friends with this individual. However, there's one problem. 😨</p>\n<p><em>Every one in your neighbourhood speaks Español exclusively. Oh, also, you don't speak Spanish</em> 😞</p>\n<p>In order to communicate with your potential friend, you would need some sort of translator to help convert your speech from English to Spanish. In programming terms, this translator is what we call an adapter!</p>\n<p>Let's understand at how this would look in code.</p>\n<p>As a first step, let's create the interface that a normal Spanish-speaking person would implement along with the structs for both, the Spanish and the English speaking person.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> SpeakSpanish <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">greetInSpanish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Notice that the SpanishSpeaker already implements the</span>\n<span class=\"token comment\">// SpeakSpanish interface</span>\n<span class=\"token keyword\">type</span> SpanishSpeaker <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>SpanishSpeaker<span class=\"token punctuation\">)</span> <span class=\"token function\">greetInSpanish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"¡Hola!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> EnglishSpeaker <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>EnglishSpeaker<span class=\"token punctuation\">)</span> <span class=\"token function\">greetInEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello there!\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>As you can see, the <code>SpanishSpeaker</code> already implements the <code>SpeakSpanish</code> interface. However, the <code>EnglishSpeaker</code> does not have a <code>greetInSpanish</code> function and hence, doesn't implement the <code>SpeakSpanish</code> interface.</p>\n<p>Let's use the adapter pattern to write a wrapper over the <code>EnglishSpeaker</code> that would give it the ability to greet in spanish.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> EnglishToSpanishAdapter <span class=\"token punctuation\">{</span>\n    speaker EnglishSpeaker\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>EnglishToSpanishAdapter<span class=\"token punctuation\">)</span> <span class=\"token function\">greetInSpanish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> englishMessage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>speaker<span class=\"token punctuation\">.</span><span class=\"token function\">greetInEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>englishMessage<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>engMessage <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> spanishMessage <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// *insert complex translation logic*</span>\n    spanishMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"¡Hola!\"</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Closely observing the adapter will show you that since it is a struct and has the <code>greetInSpanish</code> method, it implements the <code>SpeakSpanish</code> interface. This is good because once we wrap our english speaker in this adapter, we essentially get a Spanish speaker.</p>\n<p><em>Also notice that we have a translation function as a util along with the adapter. Normally, you would use some service, like google translate, to translate the messages</em></p>\n<p>Now, our Adapter module is complete. Amazing! 🔥🤘🏽</p>\n<p>Let's test it out and see it in action.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    espanol <span class=\"token operator\">:=</span> SpanishSpeaker<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    englishwoman <span class=\"token operator\">:=</span> EnglishSpeaker<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Without translation:\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Español says: \"</span><span class=\"token punctuation\">,</span> espanol<span class=\"token punctuation\">.</span><span class=\"token function\">greetInSpanish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English Woman says: \"</span><span class=\"token punctuation\">,</span> englishwoman<span class=\"token punctuation\">.</span><span class=\"token function\">greetInEnglish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    adaptedEnglishwoman <span class=\"token operator\">:=</span> EnglishToSpanishAdapter<span class=\"token punctuation\">{</span>\n        speaker<span class=\"token punctuation\">:</span> englishwoman<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"With translation:\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Español says: \"</span><span class=\"token punctuation\">,</span> espanol<span class=\"token punctuation\">.</span><span class=\"token function\">greetInSpanish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English Woman says: \"</span><span class=\"token punctuation\">,</span> adaptedEnglishwoman<span class=\"token punctuation\">.</span><span class=\"token function\">greetInSpanish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>As a result of this, you should see something like this in the terminal:</p>\n<pre class=\"language-text\"><code class=\"language-text\">Without translation:\nEspañol says:  ¡Hola!\nEnglish Woman says:  Hello there\n------------\nWith translation:\nEspañol says:  ¡Hola!\nEnglish Woman says:  ¡Hola!</code></pre>\n<p>Hurray! The translation worked; the english woman and Spanish dude can now be friends! 👩🏻‍🤝‍👨🏾</p>\n<p>Design patterns save the day, yet again 🚀😁</p>\n<p>You can find all the code for this tutorial on <a href=\"https://github.com/shubhamzanwar/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this github repo</a></p>\n<p>Cheers ☕️</p>\n","date":"01 Oct 2020","timeToRead":2,"coverImage":"/img/design-pattern.jpg","subTitle":"Taking a look at the adapter design pattern with an implementation in go","coverCredit":"Photo by <a href=\"https://unsplash.com/@eskandthewood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Silvio Kundt</a> on <a href=\"https://unsplash.com/s/photos/pattern?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}
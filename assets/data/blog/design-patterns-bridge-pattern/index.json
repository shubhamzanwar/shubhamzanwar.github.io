{"hash":"4dcd0abb844ceeb6cf4dcf4a8f3a96c99c56ea8e","data":{"post":{"id":"44a31d47b0f9c5078a9c80849ff7a685","title":"Design Patterns: Bridge Pattern üåâ","content":"<p>The bridge is a structural design pattern that helps in splitting up a complex piece of code into multiple parts so that each part can be developed, scaled and maintained independently.</p>\n<p>You will commonly see this employed when you have classes in your code that have multiple tangential functionalities. In such a case, it is better practice to split the functionalities up into smaller classes and build a mechanism (<em>a bridge, maybe?</em>) to connect them</p>\n<p>Let us take a look at an example to understand better</p>\n<h3 id=\"employee-management-system\"><a href=\"#employee-management-system\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Employee Management system</h3>\n<p>Assume that your workplace needs an employee management system. As part of this requirement, you need to categorize your workforce by gender and their function/department.</p>\n<p>Currently, you have the following genders and department:</p>\n<p><strong>Genders</strong></p>\n<ul>\n<li>Male</li>\n<li>Female</li>\n</ul>\n<p><strong>Department</strong></p>\n<ul>\n<li>Developer</li>\n<li>Product manager (PM)</li>\n<li>Human Resources (HR)</li>\n</ul>\n<p>A naive way of approaching this problem would be to implement multiple structs, like, <code>MaleDeveloper</code>, <code>FemaleDeveloper</code>, <code>MalePM</code>, <code>FemalePM</code>, and so on. This is fine if we have already defined a set of genders and departments. However, that's never realistically the case.</p>\n<p>We can always grow departments to include more functions and we can always onboard employees who identify as non-binary (let's not be ignorant üè≥Ô∏è‚Äçüåà). The problem that would arise then is that, for every new gender we onboard, we would have to create 3 new structs - one for each combination of the new gender and existing departments.</p>\n<p>This number would only increase as our organization grows and it's going to be a nightmare to maintain these structs üò®</p>\n<blockquote>\n<p>Note: Go does not have classes. Structs are a way of implementing classes in golang. If you're working with another programming language, think <code>classes</code> every time I say <code>structs</code></p>\n</blockquote>\n<p>Enter, the Bridge pattern. According to the Bridge pattern, we should separate the different dimensions of a struct into separate sub structs. In this case, we would have separate structs for each gender and separate structs for each department.</p>\n<p>Let's take a look at this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Gender <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">describePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Department <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getDepartmentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now that we have the two interfaces defined, we can expect any future departments/genders to implement them. Currently, though, let's implement the existing struct we know using these interfaces:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// male.go</span>\n\n<span class=\"token keyword\">type</span> Male <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token builtin\">string</span>\n    age <span class=\"token builtin\">int</span>\n    department Department\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Male<span class=\"token punctuation\">)</span> <span class=\"token function\">describePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    description <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s is a %d years old man\\n\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n    description  <span class=\"token operator\">=</span> description <span class=\"token operator\">+</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"He works in the %s department\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">.</span><span class=\"token function\">getDepartmentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> description\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// female.go</span>\n\n<span class=\"token keyword\">type</span> Female <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token builtin\">string</span>\n    age <span class=\"token builtin\">int</span>\n    department Department\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>Female<span class=\"token punctuation\">)</span> <span class=\"token function\">describePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    description <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s is a %d years old woman\\n\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n    description  <span class=\"token operator\">=</span> description <span class=\"token operator\">+</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"She works in the %s department\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">.</span><span class=\"token function\">getDepartmentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> description\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// departments.go</span>\n\n<span class=\"token keyword\">type</span> Developer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> PM <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> HR <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>d Developer<span class=\"token punctuation\">)</span> <span class=\"token function\">getDepartmentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"software development\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>pm PM<span class=\"token punctuation\">)</span> <span class=\"token function\">getDepartmentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"product management\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>hr HR<span class=\"token punctuation\">)</span> <span class=\"token function\">getDepartmentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"human resources\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>As you can see, we have successfully separated the functionalities by gender and department. Notice however, that we have a <code>department</code> key in both the gender structs. This key is, in fact, the <strong><em>bridge</em></strong> between the two dimensions, gender and department.</p>\n<p>Now, every time we need to create a new gender or department, we only have to create one additional class and the bridge takes care of the rest.</p>\n<p>Time to test our code out üß™</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//main.go</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    maleDeveloper <span class=\"token operator\">:=</span> Male<span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span> <span class=\"token string\">\"22\"</span><span class=\"token punctuation\">,</span>\n        department<span class=\"token punctuation\">:</span> Developer<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>maleDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">describePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------\"</span><span class=\"token punctuation\">)</span>\n\n    femalePM <span class=\"token operator\">:=</span> Female<span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Natalie\"</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span> <span class=\"token string\">\"24\"</span><span class=\"token punctuation\">,</span>\n        department<span class=\"token punctuation\">:</span> PM<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>femalePM<span class=\"token punctuation\">.</span><span class=\"token function\">describePerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The output of this program should look like this</p>\n<pre class=\"language-text\"><code class=\"language-text\">John is a 22 years old man\nHe works in the software development department\n-------------\nNatalie is a 24 years old woman\nShe works in the product management department</code></pre>\n<p>That's the bridge pattern for you üòâ</p>\n<p>You can find all the code for this tutorial on <a href=\"https://github.com/shubhamzanwar/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this github repo</a></p>\n<p>Cheers ‚òïÔ∏è</p>\n","date":"01 Oct 2020","timeToRead":3,"coverImage":"/img/design-pattern.jpg","subTitle":"Taking a look at the bridge design pattern with an implementation in go","coverCredit":"Photo by <a href=\"https://unsplash.com/@eskandthewood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Silvio Kundt</a> on <a href=\"https://unsplash.com/s/photos/pattern?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}
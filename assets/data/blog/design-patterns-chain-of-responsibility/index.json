{"hash":"8c275c19eb1de20879e95ed4114121d4d50201a2","data":{"post":{"id":"2977e5b56022d061d4ad3322c2e5a5f0","title":"Design Patterns: Chain of Responsibility ‚õì","content":"<p>The Chain of responsibility pattern is a behavioral design pattern that deals with breaking down a complex problem into sequentially occurring steps. At each step, there is a possibility of moving to the next step or exiting from the chain.</p>\n<p>To understand this better, let's understand how a basic call center would work. Think of all the stages you'd go through when you ring up the customer care of an electronics store to get some help regarding a new product you bought.</p>\n<h3 id=\"customer-care\"><a href=\"#customer-care\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Customer Care</h3>\n<p>A generic customer care you follow the following steps:</p>\n<ol>\n<li>The user would start off by interacting with an automated voice assistant. The user can choose to continue or drop off.</li>\n<li>Next, the user would be redirected to the call center associate. Based on the query, the associate can choose to resolve it or progress the user to the next level.</li>\n<li>The final stage; the user is redirected to the manager - who can take care of almost anything.</li>\n</ol>\n<p><strong>There's also a special case, if the customer is a high priority customer, the system skips the conversation with the associate and directly connects the customer to the manager.</strong></p>\n<p>Let's imagine how we would code this. ü§î A na√Øve approach would be to have a single function that the user enters and then based on the user's status and interactions, different sub-functions (voice assistant, associate or manager) are called.</p>\n<p>However, as our system grows and we want to add more features, this approach would make the function difficult to manage and the sub-functions difficult to reuse. More importantly, this approach <strong>violates the SOLID programming principle of separating concerns</strong>. ü§ï</p>\n<p>As an alternative, we could design our sub-functions in such a way that they would immediately call the next step in the chain as soon as their execution is over. In that way, the functionality for every step is maintained in a separate function but also it's easier to swap pieces out from the chain/insert more steps in the chain üîÅ</p>\n<p>Let's check out the implementation for this in go:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> step <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>customer<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNextStep</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> customer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token builtin\">string</span>\n    isHighPriority <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> voiceAssistant <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    next step\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>voiceAssistant<span class=\"token punctuation\">)</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>cust <span class=\"token operator\">*</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Voice Assistant] Serving the customer: \"</span><span class=\"token punctuation\">,</span> cust<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    v<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>voiceAssistant<span class=\"token punctuation\">)</span> <span class=\"token function\">setNextStep</span><span class=\"token punctuation\">(</span>next step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> associate <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    next step\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>associate<span class=\"token punctuation\">)</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>cust <span class=\"token operator\">*</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> cust<span class=\"token punctuation\">.</span>isHighPriority <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Redirecting customer directly to manager\"</span><span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Associate] Serving the customer: \"</span><span class=\"token punctuation\">,</span> cust<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>associate<span class=\"token punctuation\">)</span> <span class=\"token function\">setNextStep</span><span class=\"token punctuation\">(</span>next step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> manager <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    next step\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>manager<span class=\"token punctuation\">)</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>cust <span class=\"token operator\">*</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Manager] Serving the customer: \"</span><span class=\"token punctuation\">,</span> cust<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>manager<span class=\"token punctuation\">)</span> <span class=\"token function\">setNextStep</span><span class=\"token punctuation\">(</span>next step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next\n<span class=\"token punctuation\">}</span></code></pre>\n<p>At this point, each link of our chain is now created. We need to arrange them properly so that they follow the desired workflow: <code>Voice Assistant -> Associate(optional) -> Manager</code>. Let's do this in our main function for two different customers and see the result</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>manager<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    assoc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>associate<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    assoc<span class=\"token punctuation\">.</span><span class=\"token function\">setNextStep</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n\n    va <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>voiceAssistant<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    va<span class=\"token punctuation\">.</span><span class=\"token function\">setNextStep</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Chain formation complete</span>\n\n    <span class=\"token comment\">// Start chain execution for normal customer</span>\n    normalCust <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>customer<span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span>\n    <span class=\"token punctuation\">}</span>\n\n    va<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>normalCust<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Start chain execution for high priority customer</span>\n    highPriorityCust <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>customer<span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n        isHighPriority<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    va<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>highPriorityCust<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This should give you the following output:</p>\n<pre class=\"language-text\"><code class=\"language-text\">[Voice Assistant] Serving the customer:  Bob\n[Associate] Serving the customer:  Bob\n[Manager] Serving the customer:  Bob\n===================\n[Voice Assistant] Serving the customer:  John\nRedirecting customer directly to manager\n[Manager] Serving the customer:  John</code></pre>\n<p>That's the Chain of Responsibility pattern for you! üòÅ</p>\n<p>You can find all the code for this tutorial on this <a href=\"https://github.com/shubhamzanwar/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this github repo</a></p>\n<p>Cheers ‚òïÔ∏è</p>\n","date":"07 Nov 2020","timeToRead":3,"coverImage":"/img/design-pattern-chain.jpg","subTitle":"Taking a look at the Chain of Responsibility pattern with an implementation in go","coverCredit":"Photo by <a href=\"https://unsplash.com/@carlosaranda?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">carlos aranda</a> on <a href=\"https://unsplash.com/s/photos/manufacturing?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}
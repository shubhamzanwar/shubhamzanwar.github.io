{"hash":"7159aded1aa11c4612a51961c9c0c5376b6ae38e","data":{"post":{"id":"9edbe085d2c39ea1264e393ef55dae11","title":"Design Patterns: Factory Pattern 🏭","content":"<p>Factory pattern is a commonly used creational design pattern. It is normally used when the user is expected to choose between multiple options.</p>\n<p>Let's take an example to understand.</p>\n<h3 id=\"pet-store\"><a href=\"#pet-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pet store</h3>\n<p>Let's take a scenario of how this would work in a pet store. To understand this completely, we'll look at the implementation from both, the view of the shop-owner(<code>developer</code> creating the factory) and the customer (<code>user</code> using the interface)</p>\n<h4 id=\"owners-perspective\"><a href=\"#owners-perspective\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Owner's perspective</h4>\n<p>Assume that you're the owner of a dog store (you only put little doggos up for adoption). Since you're in the software world, every dog is an instance of a <code>Dog</code> class that you have. Now, when a customer arrives, you simply create a new instance of <code>Dog</code> and let them adopt that.🐶</p>\n<p>Lately, however, the customers have started requesting for variety. They're looking for options to adopt cats too.😼</p>\n<p>Being a clever shop-owner, you've identified that this demand can only keep getting more varied. People will continue expecting more variety.😨😤</p>\n<p><strong><em>You need a robust, scalable system to generate new pets for customers</em></strong>\nEnter, the factory pattern</p>\n<p>You make a list of all the common traits (<code>features</code>) of your pets. They allow you to get the name, get the sound they make and get their age. This list allows you to create an interface with the following functions:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Pet <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">GetAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">GetSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, you can create any number of pets that have the same features (<code>implement the same interface</code>). You could have cats, dogs, fish, parrots, anything - as long as the implement the <code>Pet</code> interface!😯 As of now, let's create the Dog and the Cat:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// pet is a struct that implements Pet interface and</span>\n<span class=\"token comment\">// would be used in any animal struct that we create.</span>\n<span class=\"token comment\">// See `Dog` and `Cat` below</span>\n<span class=\"token keyword\">type</span> pet <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    name  <span class=\"token builtin\">string</span>\n    age   <span class=\"token builtin\">int</span>\n    sound <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>pet<span class=\"token punctuation\">)</span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>pet<span class=\"token punctuation\">)</span> <span class=\"token function\">GetSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>sound\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>pet<span class=\"token punctuation\">)</span> <span class=\"token function\">GetAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>age\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Dog <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    pet\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Cat <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    pet\n<span class=\"token punctuation\">}</span></code></pre>\n<p>An additional thing you would require is a factory that would return a different pet (dog/cat) based on the user's request. Simply put, if the user asks for a dog, give them a cute doggo, duh.🙄🦮</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetPet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Pet <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"dog\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Dog<span class=\"token punctuation\">{</span>\n            pet<span class=\"token punctuation\">{</span>\n                name<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"Chester\"</span><span class=\"token punctuation\">,</span>\n                age<span class=\"token punctuation\">:</span>   <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                sound<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bark\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Cat<span class=\"token punctuation\">{</span>\n            pet<span class=\"token punctuation\">{</span>\n                name<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"Mr. Buttons\"</span><span class=\"token punctuation\">,</span>\n                age<span class=\"token punctuation\">:</span>   <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n                sound<span class=\"token punctuation\">:</span> <span class=\"token string\">\"meow\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Notice how the <code>GetPet</code> function only tells that it returns a <code>Pet</code> - Not a <code>Dog</code> or a <code>Cat</code> explicitly. Hence, this function is open to extension (by writing more structs that implement the <code>Pet</code> interface). Adding more <code>Pet</code> types will not affect the existing users who just want <code>Dog</code>s anyway.</p>\n<p>Congratulations! you've created a Pet shop using the factory pattern🎉❤️</p>\n<h4 id=\"customers-perspective\"><a href=\"#customers-perspective\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Customer's perspective</h4>\n<p>Let's look at it from the perspective of the user. All they would need to do is call the <code>GetPet</code> function with whatever config (in this case, <code>type</code>) they want. In return, all they know is that they are getting a <code>Pet</code>.🤔 This may sound bizarre in the real world sense of things, but when it comes to code, it's better to maintain abstraction.😌</p>\n<p>The users can freely go about \"using\" the <code>Pet</code> as they like. This \"usage\" would remain the same irrespective of what type of pet they got back (because all pets implement the common interface!!)</p>\n<p>Let's test it out</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">describePet</span><span class=\"token punctuation\">(</span>pet Pet<span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s is %d years old. It's sound is %s\"</span><span class=\"token punctuation\">,</span> pet<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pet<span class=\"token punctuation\">.</span><span class=\"token function\">GetAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pet<span class=\"token punctuation\">.</span><span class=\"token function\">GetSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    petType <span class=\"token operator\">:=</span> <span class=\"token string\">\"dog\"</span>\n\n    dog <span class=\"token operator\">:=</span> <span class=\"token function\">GetPet</span><span class=\"token punctuation\">(</span>petType<span class=\"token punctuation\">)</span>\n    petDescription <span class=\"token operator\">:=</span> <span class=\"token function\">describePet</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>petDescription<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------\"</span><span class=\"token punctuation\">)</span>\n\n    petType <span class=\"token operator\">=</span> <span class=\"token string\">\"cat\"</span>\n    cat <span class=\"token operator\">:=</span> <span class=\"token function\">GetPet</span><span class=\"token punctuation\">(</span>petType<span class=\"token punctuation\">)</span>\n    petDescription <span class=\"token operator\">=</span> <span class=\"token function\">describePet</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>petDescription<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The output should look like:</p>\n<pre class=\"language-text\"><code class=\"language-text\">Chester is 2 years old. It's sound is bark\n-------------\nMr. Buttons is 3 years old. It's sound is meow</code></pre>\n<p>You can find all the code for this tutorial on <a href=\"https://github.com/shubhamzanwar/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this github repo</a></p>\n<p>Hope this made understanding the factory pattern easier 🚀</p>\n<p>Cheers ☕️</p>\n","date":"01 Oct 2020","timeToRead":3,"coverImage":"/img/design-pattern.jpg","subTitle":"Taking a look at the factory design pattern with an implementation in go","coverCredit":"Photo by <a href=\"https://unsplash.com/@eskandthewood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Silvio Kundt</a> on <a href=\"https://unsplash.com/s/photos/pattern?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}
{"hash":"0202b737b16fc056b3e9dd90aa7e6245c561311b","data":{"post":{"id":"8d6f92680df6d8a45459566886561bc2","title":"Design Patterns: Decorator Pattern üéÅ","content":"<p>The Decorator pattern is a structural design pattern that is used when we need to <em>enhance</em> the functionality of a given object <em>without changing it's interface.</em></p>\n<p>In this pattern, we usually have a base/bare-bones class that implements a certain interface. Along with this, we have multiple \"wrapper\" classes that allow users to enhance the methods of the base class without changing the interface.</p>\n<p><em>This means that even the \"Wrapper\" classes implement the same interface</em></p>\n<p>Let's consider an example to understand this better. We will discuss about a usecase that requires storing user information to a storage system and what happens when we need to encrypt some data before storing. üóÉ</p>\n<h3 id=\"storage-system\"><a href=\"#storage-system\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Storage system</h3>\n<p>Assume that you have a storage system for your websites audience that stores the users' data: <code>email</code>, in our case. Being a good developer, you had designed this module to be super generic and it is now being used by multiple teams in your organization. üòé</p>\n<p>Everything sounds great? Here's the problem. You have a new requirement - Only your team needs to encrypt the users' data before storing it. ü§Ø</p>\n<p>You obviously cannot modify the existing module. Too many teams are using it and they'll kill you if you do üôÉ. You also cannot re-write everything from scratch. You don't have enough time for that and it also isn't the best way of solving this.</p>\n<p>You remember a colleague telling you about the decorator pattern and you decide to put it into action üí°. Here's how it goes:</p>\n<ol>\n<li>You have an interface, <code>StorageSystem</code> that contains two methods, <code>writeInfo</code> and <code>readInfo</code>.</li>\n<li>The struct you had previously created by implementing <code>StorageSystem</code> is <code>GenericStorageSystem</code> - Assume that this just stores the information in memory.</li>\n<li>To fulfill the requirement, you still need some struct to implement <code>StorageSystem</code> while also encrypting the data. Yes, I repeat, you can't just create a new struct from scratch. You need to use <code>GenericStorageSystem</code>.</li>\n<li>You decide to create <code>EncryptedStorageSystem</code>. It wraps over the <code>GenericStorageSystem</code> and implements the <code>writeInfo</code> and <code>readInfo</code> which call <code>writeInfo</code> and <code>readInfo</code> of <code>GenericStorageSystem</code> respectively <em>after</em> encrypting/decrypting the data.</li>\n</ol>\n<p>Voila! You've saved a bunch time and also have a scalable solution. Here, have a cookie for your efforts üç™</p>\n<p>Let's see how this looks in Go code:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> StorageSystem <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">writeInfo</span><span class=\"token punctuation\">(</span>info <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">readInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> GenericStorageSystem <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span>GenericStorageSystem<span class=\"token punctuation\">)</span> <span class=\"token function\">writeInfo</span><span class=\"token punctuation\">(</span>info <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// write information to file system as is.</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writing info to the file system: \"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n    g<span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> info\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span>GenericStorageSystem<span class=\"token punctuation\">)</span> <span class=\"token function\">readInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Return info from file system as is.</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reading info from the file system: \"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">.</span>info\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> EncryptedStorageSystem <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    storageSystem StorageSystem\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>EncryptedStorageSystem<span class=\"token punctuation\">)</span> <span class=\"token function\">writeInfo</span><span class=\"token punctuation\">(</span>info <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypting the data\"</span><span class=\"token punctuation\">)</span>\n    encryptedInfo <span class=\"token operator\">:=</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    e<span class=\"token punctuation\">.</span>storageSystem<span class=\"token punctuation\">.</span><span class=\"token function\">writeInfo</span><span class=\"token punctuation\">(</span>encryptedInfo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>EncryptedStorageSystem<span class=\"token punctuation\">)</span> <span class=\"token function\">readInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span>storageSystem<span class=\"token punctuation\">.</span><span class=\"token function\">readInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    decryptedInfo <span class=\"token operator\">:=</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decrypting info from the file system: \"</span><span class=\"token punctuation\">,</span> decryptedInfo<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> decryptedInfo\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Let's also create dummy <code>encrypt</code> and <code>decrypt</code> functions. These just rotate the string in different directions</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">encrypt</span> <span class=\"token punctuation\">(</span>info <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">decrypt</span> <span class=\"token punctuation\">(</span>info <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Aaaand we're done üíÉüèª. Let's check it out in action:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    info <span class=\"token operator\">:=</span> <span class=\"token string\">\"kingslayer@gmail.com\"</span>\n    genericStorage <span class=\"token operator\">:=</span> GenericStorageSystem<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    genericStorage<span class=\"token punctuation\">.</span><span class=\"token function\">writeInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    genericStorage<span class=\"token punctuation\">.</span><span class=\"token function\">readInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------\"</span><span class=\"token punctuation\">)</span>\n\n    encryptedStorage <span class=\"token operator\">=</span> EncryptedStorage<span class=\"token punctuation\">{</span>\n        storageSystem<span class=\"token punctuation\">:</span> genericStorage<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    encryptedStorage<span class=\"token punctuation\">.</span><span class=\"token function\">writeInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    encryptedStorage<span class=\"token punctuation\">.</span><span class=\"token function\">readInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You should see this in the output:</p>\n<pre class=\"language-text\"><code class=\"language-text\">Writing info to the file system:  kingslayer@gmail.com\nReading info from the file system:  kingslayer@gmail.com\n------------\nEncrypting the data\nWriting info to the file system:  ingslayer@gmail.comk\nReading info from the file system:  ingslayer@gmail.comk\nDecrypting info from the file system:  kingslayer@gmail.com</code></pre>\n<p>Notice how the end result in both the cases are similar. You wrote a string, and got back the same string when you requested it. However, in the second case, the data was encrypted while storing and decrypted while reading - The most important part is that all of this is abstracted from the user.</p>\n<p>There you have it - The decorator pattern üéâ</p>\n<p>Now that you have a good understanding of the decorator pattern, let's discuss why it's a good thing:</p>\n<ul>\n<li>Notice how you did not have to create a new storage from scratch. This saved a bunch of time and also didn't change the API for your storage system. Hence, no unhappy users.</li>\n<li>Also notice that the <code>EncryptedStorageSystem</code> implements the <code>StorageSystem</code> interface and wraps around any <code>StorageSystem</code>; not just <code>GenericStorageSystem</code>. This is pretty powerful because you will be able to create multiple recursive wrappers. You can now, even <em>compress</em> your data after encrypting, if you're into that üí™üèΩüòÅ</li>\n</ul>\n<blockquote>\n<p>Note: The Decorator pattern is different from the <a href=\"/blog/design-patterns-adapter-pattern/\">Adapter pattern</a> because the adapter pattern converts one struct into another. Hence, there is a change in API. The decorator pattern, on the other hand, simply wraps around the existing struct without changing the API.</p>\n</blockquote>\n<p>You can find all the code for this tutorial on this <a href=\"https://github.com/shubhamzanwar/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this github repo</a></p>\n<p>Cheers ‚òïÔ∏è</p>\n","date":"06 Oct 2020","timeToRead":4,"coverImage":"/img/design-pattern.jpg","subTitle":"Taking a look at the decorator design pattern with an implementation in go","coverCredit":"Photo by <a href=\"https://unsplash.com/@eskandthewood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Silvio Kundt</a> on <a href=\"https://unsplash.com/s/photos/pattern?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}
{"hash":"dccab296e07d277c313fef5cf1296a96c3868b33","data":{"post":{"id":"c349a670633fb03e22f39d0a16ebba80","title":"Design Patterns: Builder Pattern üë∑üèΩ‚Äç‚ôÇÔ∏è","content":"<p>The builder pattern is a creational design pattern. It is used when the creation of a product involves multiple, independent steps.</p>\n<p>What's the one thing that immediately comes to your mind when you think of something that requires multiple steps to be \"built\"? That's right, subway!! ü•ôü§§\nYou choose your bread, you choose if you want cheese, you choose your toppings and finally your sauces!</p>\n<p>I'm sure you understand the process of creating a sub. Let's see what it would look like if we coded it using the Builder pattern:</p>\n<h3 id=\"subway\"><a href=\"#subway\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Subway</h3>\n<p>Let us assume that we have 2 different types(recipes) for a sub - Veggie Delight and Chicken Teriyaki. Each of these would have a \"Builder\" dedicated to them.</p>\n<p>The interface that these builders implement will be the same - That way, we can easily add more types(recipes) to our menu.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> sub <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    bread <span class=\"token builtin\">string</span>\n    hasCheese <span class=\"token builtin\">bool</span>\n    toppings <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n    sauces <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> iSubBuilder <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setBread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setToppings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setSauces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">getSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> sub\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> veggieDelightBuilder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    sub\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>veggieDelightBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setBread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>bread <span class=\"token operator\">=</span> <span class=\"token string\">\"parmesan oregano\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>veggieDelightBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>hasCheese <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>veggieDelightBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setToppings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>toppings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"olives\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tomatoes\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onions\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jalape√±os\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>veggieDelightBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setSauces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>sauces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"south west\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>veggieDelightBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">getSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> sub <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>sub\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> chickenTeriyakiBuilder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    sub\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>chickenTeriyakiBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setBread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>bread <span class=\"token operator\">=</span> <span class=\"token string\">\"italian\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>chickenTeriyakiBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>hasCheese <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>chickenTeriyakiBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setToppings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>toppings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"roasted chicken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"olives\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onions\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jalape√±os\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>chickenTeriyakiBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">setSauces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">.</span>sauces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"chilli\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbq\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>chickenTeriyakiBuilder<span class=\"token punctuation\">)</span> <span class=\"token function\">getSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> sub <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>sub\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We've successfully created the sub and the builders. As you may have observed, we can easily create another recipe and have it implement all the functions.</p>\n<p>Now, let's create an optional director struct that would accept accept a builder and then build subs for us.</p>\n<blockquote>\n<p>The director is not always part of the builder pattern. You could look at it as an added layer of abstraction for cleaner code</p>\n</blockquote>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> director <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    builder iSubBuilder\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>director<span class=\"token punctuation\">)</span> <span class=\"token function\">setBuilder</span><span class=\"token punctuation\">(</span>builder iSubBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    d<span class=\"token punctuation\">.</span>builder <span class=\"token operator\">=</span> builder\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>director<span class=\"token punctuation\">)</span> <span class=\"token function\">buildSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> sub <span class=\"token punctuation\">{</span>\n    d<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setBread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setToppings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setSauces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">getSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong><em>Aaand we're done</em></strong> üéâ</p>\n<p>Let's see it in action:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">describeSub</span><span class=\"token punctuation\">(</span>sub sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bread: %s, cheese: %t, toppings: %s, sauces: %s\\n\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>bread<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>hasCheese<span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">,</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">.</span>sauces<span class=\"token punctuation\">,</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    veggieDelight <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>veggieDelightBuilder<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    director <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>director <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">:</span> veggieDelight<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    veggieDelightSub <span class=\"token operator\">:=</span> director<span class=\"token punctuation\">.</span><span class=\"token function\">buildSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">describeSub</span><span class=\"token punctuation\">(</span>veggieDelightSub<span class=\"token punctuation\">)</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------\"</span><span class=\"token punctuation\">)</span>\n\n    director<span class=\"token punctuation\">.</span><span class=\"token function\">setBuilder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>chickenTeriyakiBuilder<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    chickenTeriyakiSub <span class=\"token operator\">:=</span> director<span class=\"token punctuation\">.</span><span class=\"token function\">buildSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">describeSub</span><span class=\"token punctuation\">(</span>chickenTeriyakiSub<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Running this program should get you this in your terminal</p>\n<pre class=\"language-text\"><code class=\"language-text\">bread: parmesan oregano, cheese: false, toppings: olives, tomatoes, onions, jalape√±os, sauces: south west\n------------\nbread: italian, cheese: true, toppings: roasted chicken, olives, onions, jalape√±os, sauces: chilli, bbq</code></pre>\n<p>You can find all the code for this tutorial on <a href=\"https://github.com/shubhamzanwar/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this github repo</a></p>\n<p>Hope this made understanding the Builder pattern easier üöÄ</p>\n<p>Cheers ‚òïÔ∏è</p>\n","date":"01 Oct 2020","timeToRead":2,"coverImage":"/img/design-pattern.jpg","subTitle":"Taking a look at the builder design pattern with an implementation in go","coverCredit":"Photo by <a href=\"https://unsplash.com/@eskandthewood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Silvio Kundt</a> on <a href=\"https://unsplash.com/s/photos/pattern?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>"}},"context":{}}